/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package login;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import javax.swing.JFileChooser;



import java.io.*;
import java.io.IOException;
import java.nio.file.Files;



import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
import java.util.UUID;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;

/**
 *
 * @author eloyo
 */
public class CSFrame extends javax.swing.JFrame {

    public static String  claveTest = "AAAAAAAAAAAA";
    public static String archivoStringCifrar = null;
     public static String archivoStringDescifrar = null;
     public static String cadenaOriginal = null;
     public static String nombreActual = null;
     public static File inicial=null;
    /**
     * Creates new form CSFrame
     */
    public CSFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 0, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Cifrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, -1, -1));

        jButton2.setText("Descifrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 320, -1, -1));

        jButton3.setText("Elegir Archivo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 160, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
          JFileChooser fc = new JFileChooser();
//Mostrar la ventana para abrir archivo y recoger la respuesta
//En el parámetro del showOpenDialog se indica la ventana
//  al que estará asociado. Con el valor this se asocia a la
//  ventana que la abre.
int respuesta = fc.showOpenDialog(this);
//Comprobar si se ha pulsado Aceptar
if (respuesta == JFileChooser.APPROVE_OPTION) {
    //Crear un objeto File con el archivo elegido
    File archivoElegido = fc.getSelectedFile();
    if(inicial==null){
    inicial=archivoElegido;
    System.out.println(fileToString(inicial));
    }
    
    archivoStringCifrar = fileToString(archivoElegido);
    cadenaOriginal = archivoStringCifrar;
    
    nombreActual = archivoElegido.getName();
    //byte [] fileInByte = fileToByte(archivoElegido);
    //Mostrar el nombre del archvivo en un campo de texto
    System.out.println("Archivo elegido: " + archivoElegido.getName());
    
       //      System.out.println("Archivo elegido: " + Files.readAllBytes(archivoElegido.toPath()));
  
}
    }//GEN-LAST:event_jButton3ActionPerformed

    
    //BOTON QUE CIFRA
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            claveTest=generateWord();
            escribirFichero(claveTest);
     String archivoCifrado = encriptar(archivoStringCifrar, claveTest);
       System.out.println("cifrado:" + archivoCifrado);
       archivoStringDescifrar = archivoCifrado;
        }catch(Exception e){
        e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    //BOTON QUE DESCIFRA
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          try{
              claveTest=lee();
              System.out.println(claveTest);
              System.out.println(nombreActual);
              archivoStringDescifrar=devuelve();
     String archivoDescifrado = desencriptar(archivoStringDescifrar, claveTest);
       System.out.println("descifrado:" + archivoDescifrado);
       
       
       if(archivoDescifrado.equals(fileToString(inicial))){
       System.out.println("ok");

       }else{System.out.println("problema");
}
        }catch(Exception e){
        e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    //Transforma cifrado en string
    public String devuelve() throws IOException {
        String texto=null;
        
        BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\eloyo\\Desktop\\servidor\\cifrado\\"+nombreActual));
    // Leer la primera línea, guardando en un String
    texto = br.readLine();
    // Repetir mientras no se llegue al final del fichero
    
    System.out.println(texto);
        return texto;
    }

    
    
    //Metodo devuelve clave secreta correspondiente
    
    
    public String lee() {
        String texto="";
        String definitivo="";
        BufferedReader br = null;
try {
    // Crear un objeto BufferedReader al que se le pasa 
    //   un objeto FileReader con el nombre del fichero
    br = new BufferedReader(new FileReader("C:\\Users\\eloyo\\Desktop\\servidor\\cifrado\\claves.txt"));
    // Leer la primera línea, guardando en un String
    texto = br.readLine();
    // Repetir mientras no se llegue al final del fichero
    while( texto!=null) {
        // Hacer lo que sea con la línea leída
        // En este ejemplo sólo se muestra por consola
        System.out.println(texto);
        if(texto.equals(nombreActual)){
            definitivo=br.readLine();
            texto=null;
        }
        else{
            texto = br.readLine();
        }
        // Leer la siguiente línea
        
        
    }
    
}
// Captura de excepción por fichero no encontrado
catch (FileNotFoundException ex) {
    System.out.println("Error: Fichero no encontrado");
    ex.printStackTrace();
}
// Captura de cualquier otra excepción
catch(Exception ex) {
    System.out.println("Error de lectura del fichero");
    ex.printStackTrace();
}
// Asegurar el cierre del fichero en cualquier caso
finally {
    try {
        // Cerrar el fichero si se ha podido abrir
        if(br != null) {
            br.close();
        }
    }
    catch (Exception ex) {
        System.out.println("Error al cerrar el fichero");
        ex.printStackTrace();
    }
}
        return definitivo;
    }
    
    //metodo que pasa un file a String
    
    //metodo  que transforma un File en un byte[]
      /* public byte[] fileToByte(File file){
         //File file = new File(');ºº
             byte[] fileContent ;
             
             fileContent = new byte[999999999];
         try {
        fileContent = Files.readAllBytes(file.toPath());
        
        return fileContent;
         }catch(Exception e){
         e.printStackTrace();
         }
         
         return fileContent;
    }*/    
    
    //TRANSFORMAMOS DE IMAGEN A ARRAY DE BYTE[]
    
   /* public byte[] imageToByte(String path, String extension ) throws IOException{
 BufferedImage bi2 = ImageIO.read(new File(path)); 
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ImageIO.write(bi2, extension, bos);

        byte[] file = bos.toByteArray();
        return file;
    }*/
    //METODO QUE GENERA UNA PALABRA ALEATORIA
    public static String generateWord() {
		String uuid = UUID.randomUUID().toString();
		uuid = uuid.replaceAll("-", "");
		return uuid.substring(0, 11);
	}
    //METODO QUE ESCRIBE EN UN FICHERO DE TEXTO 
    
public void escribirFichero(String str) throws IOException{
        try (FileWriter fichero =new FileWriter("C:\\Users\\eloyo\\Desktop\\servidor\\cifrado\\claves.txt",true)) {
            try (BufferedWriter bf = new BufferedWriter(fichero)) {
                bf.write(nombreActual+".txt\n");
                bf.write(str+"\n");
            }
            fichero.close();
        }
       }

//METODO QUE ESCRIBE FICHERO ENCRIPTADO EN BASE 64

public void escribirEncriptado(String str) throws IOException{
        try (FileWriter fichero =new FileWriter("C:\\Users\\eloyo\\Desktop\\servidor\\cifrado\\"+nombreActual+".txt")) {
            try (BufferedWriter bf = new BufferedWriter(fichero)) {
                bf.write(str);
            }
            fichero.close();
        }
       }

//METODO QUE CONVIERTE SECRET KEY EN STRING
public String secretToString(SecretKeySpec key){
String encodedKey = Base64.getEncoder().encodeToString(key.getEncoded());

return encodedKey;
}

//METODO QUE CONVIERTE STRING EN SECRETKEY

public SecretKeySpec stringToSecret(String str){
// decode the base64 encoded string
byte[] decodedKey = Base64.getDecoder().decode(str);
// rebuild key using SecretKeySpec
SecretKeySpec originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
return originalKey;
}

//METODO QUE LEE LINEAS DE UN FICHERO
public String obtenerclave(String[] args) {
        File file = new File("C:\\Users\\eloyo\\Desktop\\servidor\\cifrado\\claves.txt");
 String clave = "No se ha encontrado clave";
        
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
           
                for(int i=0;br!=null;i=+2){
                    
                    if(nombreActual.equals(br.readLine())){
                        clave=br.readLine();}
}

            }
         catch (IOException e) {
            e.printStackTrace();
        }
            
            System.out.println(clave);
            return clave;
    }
    
    //TRANSFORMAMOS DE BYTE [] A IMAGEN
   /* public void byteToImage(String path, byte[] data, String extension) throws IOException{
    ByteArrayInputStream bis = new ByteArrayInputStream(data);
                BufferedImage bi = ImageIO.read(bis);                
                ImageIO.write(bi, extension, new File(path));
    }*/
       
     //metodo que transforma un file a string
       public String fileToString(File archivo){
           String contenido = "empty";
           try {
              String str = "C:\\Users\\eloyo\\Desktop\\servidor\\sincifrar\\"+archivo.getName();
               System.out.println(str);
               
     contenido = new String(Files.readAllBytes(Paths.get(str)));
      System.out.println(contenido);
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
           
           return contenido;
       }
       
       
       
          /**
     * Crea la clave de encriptacion usada internamente
     * @param clave Clave que se usara para encriptar
     * @return Clave de encriptacion
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException 
     */
    private SecretKeySpec crearClave(String clave) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        byte[] claveEncriptacion = clave.getBytes("UTF-8");
        
        MessageDigest sha = MessageDigest.getInstance("SHA-1");
        
        claveEncriptacion = sha.digest(claveEncriptacion);
        claveEncriptacion = Arrays.copyOf(claveEncriptacion, 16);
        
        SecretKeySpec secretKey = new SecretKeySpec(claveEncriptacion, "AES");

        return secretKey;
    }
    
       /**
     * Aplica la encriptacion AES a la cadena de texto usando la clave indicada
     * @param datos Cadena a encriptar
     * @param claveSecreta Clave para encriptar
     * @return Información encriptada
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws NoSuchPaddingException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException 
     */
    public String encriptar(String datos, String claveSecreta) throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, IOException {
        SecretKeySpec secretKey = this.crearClave(claveSecreta);
        
        String toWrite = secretToString(secretKey);
        
        
        
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");        
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        byte[] datosEncriptar = datos.getBytes("UTF-8");
        byte[] bytesEncriptados = cipher.doFinal(datosEncriptar);
        String encriptado = Base64.getEncoder().encodeToString(bytesEncriptados);

         escribirEncriptado(encriptado);
        return encriptado;
    }

    /**
     * Desencripta la cadena de texto indicada usando la clave de encriptacion
     * @param datosEncriptados Datos encriptados
     * @param claveSecreta Clave de encriptacion
     * @return Informacion desencriptada
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws NoSuchPaddingException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException 
     */
    public String desencriptar(String datosEncriptados, String claveSecreta) throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, IOException {
        System.out.println("He entrado");
        SecretKeySpec secretKey = this.crearClave(claveSecreta);

        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        
        byte[] bytesEncriptados = Base64.getDecoder().decode(datosEncriptados);
        byte[] datosDesencriptados;
        datosDesencriptados = cipher.doFinal(bytesEncriptados);
        String datos = new String(datosDesencriptados);
     
        guardarArchivo(datos);
        return datos;
    }
    
    //ESCRIBE STRING COMO ARCHIVO 
    public void guardarArchivo(String str) throws IOException {
     // Creating an instance of file
        /*String guardada=null;
        String[] varios=nombreActual.split(".");
        for(int i=0; i<2;i++)
        {
            guardada=varios[i];
            if(i==0){
                guardada+='.';
            }
            
        }*/
       String path = "C:\\Users\\eloyo\\Desktop\\servidor\\descifrados\\cover1.jpg";
       File path2= new File(path);
  
try {
    FileWriter wr= new FileWriter(path2);
    wr.write(str);
    wr.flush();
    wr.close();
}catch(Exception e){
e.printStackTrace();
}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CSFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CSFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CSFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CSFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CSFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
